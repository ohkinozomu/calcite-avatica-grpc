// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: avatica.proto

package calcite_avatica_grpc

import (
	context "context"
	calcite_avatica_go_server "github.com/ohkinozomu/calcite-avatica-go-server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvaticaClient is the client API for Avatica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvaticaClient interface {
	Catalogs(ctx context.Context, in *calcite_avatica_go_server.CatalogsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	Schemas(ctx context.Context, in *calcite_avatica_go_server.SchemasRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	Tables(ctx context.Context, in *calcite_avatica_go_server.TablesRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	TableTypes(ctx context.Context, in *calcite_avatica_go_server.TableTypesRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	TypeInfo(ctx context.Context, in *calcite_avatica_go_server.TypeInfoRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	Columns(ctx context.Context, in *calcite_avatica_go_server.ColumnsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error)
	Prepare(ctx context.Context, in *calcite_avatica_go_server.PrepareRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.PrepareResponse, error)
	Execute(ctx context.Context, in *calcite_avatica_go_server.ExecuteRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteResponse, error)
	PrepareAndExecute(ctx context.Context, in *calcite_avatica_go_server.PrepareAndExecuteRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteResponse, error)
	SyncResults(ctx context.Context, in *calcite_avatica_go_server.SyncResultsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.SyncResultsResponse, error)
	Fetch(ctx context.Context, in *calcite_avatica_go_server.FetchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.FetchResponse, error)
	CreateStatement(ctx context.Context, in *calcite_avatica_go_server.CreateStatementRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CreateStatementResponse, error)
	CloseStatement(ctx context.Context, in *calcite_avatica_go_server.CloseStatementRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CloseStatementResponse, error)
	OpenConnection(ctx context.Context, in *calcite_avatica_go_server.OpenConnectionRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.OpenConnectionResponse, error)
	CloseConnection(ctx context.Context, in *calcite_avatica_go_server.CloseConnectionRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CloseConnectionResponse, error)
	ConnectionSync(ctx context.Context, in *calcite_avatica_go_server.ConnectionSyncRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ConnectionSyncResponse, error)
	DatabaseProperty(ctx context.Context, in *calcite_avatica_go_server.DatabasePropertyRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.DatabasePropertyResponse, error)
	Commit(ctx context.Context, in *calcite_avatica_go_server.CommitRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CommitResponse, error)
	Rollback(ctx context.Context, in *calcite_avatica_go_server.RollbackRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.RollbackResponse, error)
	PrepareAndExecuteBatch(ctx context.Context, in *calcite_avatica_go_server.PrepareAndExecuteBatchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteBatchResponse, error)
	ExecuteBatch(ctx context.Context, in *calcite_avatica_go_server.ExecuteBatchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteBatchResponse, error)
}

type avaticaClient struct {
	cc grpc.ClientConnInterface
}

func NewAvaticaClient(cc grpc.ClientConnInterface) AvaticaClient {
	return &avaticaClient{cc}
}

func (c *avaticaClient) Catalogs(ctx context.Context, in *calcite_avatica_go_server.CatalogsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Catalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Schemas(ctx context.Context, in *calcite_avatica_go_server.SchemasRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Schemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Tables(ctx context.Context, in *calcite_avatica_go_server.TablesRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Tables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) TableTypes(ctx context.Context, in *calcite_avatica_go_server.TableTypesRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/TableTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) TypeInfo(ctx context.Context, in *calcite_avatica_go_server.TypeInfoRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/TypeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Columns(ctx context.Context, in *calcite_avatica_go_server.ColumnsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ResultSetResponse, error) {
	out := new(calcite_avatica_go_server.ResultSetResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Columns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Prepare(ctx context.Context, in *calcite_avatica_go_server.PrepareRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.PrepareResponse, error) {
	out := new(calcite_avatica_go_server.PrepareResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Execute(ctx context.Context, in *calcite_avatica_go_server.ExecuteRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteResponse, error) {
	out := new(calcite_avatica_go_server.ExecuteResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) PrepareAndExecute(ctx context.Context, in *calcite_avatica_go_server.PrepareAndExecuteRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteResponse, error) {
	out := new(calcite_avatica_go_server.ExecuteResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/PrepareAndExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) SyncResults(ctx context.Context, in *calcite_avatica_go_server.SyncResultsRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.SyncResultsResponse, error) {
	out := new(calcite_avatica_go_server.SyncResultsResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/SyncResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Fetch(ctx context.Context, in *calcite_avatica_go_server.FetchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.FetchResponse, error) {
	out := new(calcite_avatica_go_server.FetchResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) CreateStatement(ctx context.Context, in *calcite_avatica_go_server.CreateStatementRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CreateStatementResponse, error) {
	out := new(calcite_avatica_go_server.CreateStatementResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/CreateStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) CloseStatement(ctx context.Context, in *calcite_avatica_go_server.CloseStatementRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CloseStatementResponse, error) {
	out := new(calcite_avatica_go_server.CloseStatementResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/CloseStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) OpenConnection(ctx context.Context, in *calcite_avatica_go_server.OpenConnectionRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.OpenConnectionResponse, error) {
	out := new(calcite_avatica_go_server.OpenConnectionResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/OpenConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) CloseConnection(ctx context.Context, in *calcite_avatica_go_server.CloseConnectionRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CloseConnectionResponse, error) {
	out := new(calcite_avatica_go_server.CloseConnectionResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/CloseConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) ConnectionSync(ctx context.Context, in *calcite_avatica_go_server.ConnectionSyncRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ConnectionSyncResponse, error) {
	out := new(calcite_avatica_go_server.ConnectionSyncResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/ConnectionSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) DatabaseProperty(ctx context.Context, in *calcite_avatica_go_server.DatabasePropertyRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.DatabasePropertyResponse, error) {
	out := new(calcite_avatica_go_server.DatabasePropertyResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/DatabaseProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Commit(ctx context.Context, in *calcite_avatica_go_server.CommitRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.CommitResponse, error) {
	out := new(calcite_avatica_go_server.CommitResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) Rollback(ctx context.Context, in *calcite_avatica_go_server.RollbackRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.RollbackResponse, error) {
	out := new(calcite_avatica_go_server.RollbackResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) PrepareAndExecuteBatch(ctx context.Context, in *calcite_avatica_go_server.PrepareAndExecuteBatchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteBatchResponse, error) {
	out := new(calcite_avatica_go_server.ExecuteBatchResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/PrepareAndExecuteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaticaClient) ExecuteBatch(ctx context.Context, in *calcite_avatica_go_server.ExecuteBatchRequest, opts ...grpc.CallOption) (*calcite_avatica_go_server.ExecuteBatchResponse, error) {
	out := new(calcite_avatica_go_server.ExecuteBatchResponse)
	err := c.cc.Invoke(ctx, "/avatica_grpc.Avatica/ExecuteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvaticaServer is the server API for Avatica service.
// All implementations must embed UnimplementedAvaticaServer
// for forward compatibility
type AvaticaServer interface {
	Catalogs(context.Context, *calcite_avatica_go_server.CatalogsRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	Schemas(context.Context, *calcite_avatica_go_server.SchemasRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	Tables(context.Context, *calcite_avatica_go_server.TablesRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	TableTypes(context.Context, *calcite_avatica_go_server.TableTypesRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	TypeInfo(context.Context, *calcite_avatica_go_server.TypeInfoRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	Columns(context.Context, *calcite_avatica_go_server.ColumnsRequest) (*calcite_avatica_go_server.ResultSetResponse, error)
	Prepare(context.Context, *calcite_avatica_go_server.PrepareRequest) (*calcite_avatica_go_server.PrepareResponse, error)
	Execute(context.Context, *calcite_avatica_go_server.ExecuteRequest) (*calcite_avatica_go_server.ExecuteResponse, error)
	PrepareAndExecute(context.Context, *calcite_avatica_go_server.PrepareAndExecuteRequest) (*calcite_avatica_go_server.ExecuteResponse, error)
	SyncResults(context.Context, *calcite_avatica_go_server.SyncResultsRequest) (*calcite_avatica_go_server.SyncResultsResponse, error)
	Fetch(context.Context, *calcite_avatica_go_server.FetchRequest) (*calcite_avatica_go_server.FetchResponse, error)
	CreateStatement(context.Context, *calcite_avatica_go_server.CreateStatementRequest) (*calcite_avatica_go_server.CreateStatementResponse, error)
	CloseStatement(context.Context, *calcite_avatica_go_server.CloseStatementRequest) (*calcite_avatica_go_server.CloseStatementResponse, error)
	OpenConnection(context.Context, *calcite_avatica_go_server.OpenConnectionRequest) (*calcite_avatica_go_server.OpenConnectionResponse, error)
	CloseConnection(context.Context, *calcite_avatica_go_server.CloseConnectionRequest) (*calcite_avatica_go_server.CloseConnectionResponse, error)
	ConnectionSync(context.Context, *calcite_avatica_go_server.ConnectionSyncRequest) (*calcite_avatica_go_server.ConnectionSyncResponse, error)
	DatabaseProperty(context.Context, *calcite_avatica_go_server.DatabasePropertyRequest) (*calcite_avatica_go_server.DatabasePropertyResponse, error)
	Commit(context.Context, *calcite_avatica_go_server.CommitRequest) (*calcite_avatica_go_server.CommitResponse, error)
	Rollback(context.Context, *calcite_avatica_go_server.RollbackRequest) (*calcite_avatica_go_server.RollbackResponse, error)
	PrepareAndExecuteBatch(context.Context, *calcite_avatica_go_server.PrepareAndExecuteBatchRequest) (*calcite_avatica_go_server.ExecuteBatchResponse, error)
	ExecuteBatch(context.Context, *calcite_avatica_go_server.ExecuteBatchRequest) (*calcite_avatica_go_server.ExecuteBatchResponse, error)
	mustEmbedUnimplementedAvaticaServer()
}

// UnimplementedAvaticaServer must be embedded to have forward compatible implementations.
type UnimplementedAvaticaServer struct {
}

func (UnimplementedAvaticaServer) Catalogs(context.Context, *calcite_avatica_go_server.CatalogsRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Catalogs not implemented")
}
func (UnimplementedAvaticaServer) Schemas(context.Context, *calcite_avatica_go_server.SchemasRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schemas not implemented")
}
func (UnimplementedAvaticaServer) Tables(context.Context, *calcite_avatica_go_server.TablesRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tables not implemented")
}
func (UnimplementedAvaticaServer) TableTypes(context.Context, *calcite_avatica_go_server.TableTypesRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableTypes not implemented")
}
func (UnimplementedAvaticaServer) TypeInfo(context.Context, *calcite_avatica_go_server.TypeInfoRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeInfo not implemented")
}
func (UnimplementedAvaticaServer) Columns(context.Context, *calcite_avatica_go_server.ColumnsRequest) (*calcite_avatica_go_server.ResultSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Columns not implemented")
}
func (UnimplementedAvaticaServer) Prepare(context.Context, *calcite_avatica_go_server.PrepareRequest) (*calcite_avatica_go_server.PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedAvaticaServer) Execute(context.Context, *calcite_avatica_go_server.ExecuteRequest) (*calcite_avatica_go_server.ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedAvaticaServer) PrepareAndExecute(context.Context, *calcite_avatica_go_server.PrepareAndExecuteRequest) (*calcite_avatica_go_server.ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAndExecute not implemented")
}
func (UnimplementedAvaticaServer) SyncResults(context.Context, *calcite_avatica_go_server.SyncResultsRequest) (*calcite_avatica_go_server.SyncResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncResults not implemented")
}
func (UnimplementedAvaticaServer) Fetch(context.Context, *calcite_avatica_go_server.FetchRequest) (*calcite_avatica_go_server.FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedAvaticaServer) CreateStatement(context.Context, *calcite_avatica_go_server.CreateStatementRequest) (*calcite_avatica_go_server.CreateStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatement not implemented")
}
func (UnimplementedAvaticaServer) CloseStatement(context.Context, *calcite_avatica_go_server.CloseStatementRequest) (*calcite_avatica_go_server.CloseStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStatement not implemented")
}
func (UnimplementedAvaticaServer) OpenConnection(context.Context, *calcite_avatica_go_server.OpenConnectionRequest) (*calcite_avatica_go_server.OpenConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenConnection not implemented")
}
func (UnimplementedAvaticaServer) CloseConnection(context.Context, *calcite_avatica_go_server.CloseConnectionRequest) (*calcite_avatica_go_server.CloseConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnection not implemented")
}
func (UnimplementedAvaticaServer) ConnectionSync(context.Context, *calcite_avatica_go_server.ConnectionSyncRequest) (*calcite_avatica_go_server.ConnectionSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionSync not implemented")
}
func (UnimplementedAvaticaServer) DatabaseProperty(context.Context, *calcite_avatica_go_server.DatabasePropertyRequest) (*calcite_avatica_go_server.DatabasePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseProperty not implemented")
}
func (UnimplementedAvaticaServer) Commit(context.Context, *calcite_avatica_go_server.CommitRequest) (*calcite_avatica_go_server.CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedAvaticaServer) Rollback(context.Context, *calcite_avatica_go_server.RollbackRequest) (*calcite_avatica_go_server.RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedAvaticaServer) PrepareAndExecuteBatch(context.Context, *calcite_avatica_go_server.PrepareAndExecuteBatchRequest) (*calcite_avatica_go_server.ExecuteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAndExecuteBatch not implemented")
}
func (UnimplementedAvaticaServer) ExecuteBatch(context.Context, *calcite_avatica_go_server.ExecuteBatchRequest) (*calcite_avatica_go_server.ExecuteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBatch not implemented")
}
func (UnimplementedAvaticaServer) mustEmbedUnimplementedAvaticaServer() {}

// UnsafeAvaticaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvaticaServer will
// result in compilation errors.
type UnsafeAvaticaServer interface {
	mustEmbedUnimplementedAvaticaServer()
}

func RegisterAvaticaServer(s grpc.ServiceRegistrar, srv AvaticaServer) {
	s.RegisterService(&Avatica_ServiceDesc, srv)
}

func _Avatica_Catalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.CatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Catalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Catalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Catalogs(ctx, req.(*calcite_avatica_go_server.CatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Schemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.SchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Schemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Schemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Schemas(ctx, req.(*calcite_avatica_go_server.SchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Tables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.TablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Tables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Tables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Tables(ctx, req.(*calcite_avatica_go_server.TablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_TableTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.TableTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).TableTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/TableTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).TableTypes(ctx, req.(*calcite_avatica_go_server.TableTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_TypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.TypeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).TypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/TypeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).TypeInfo(ctx, req.(*calcite_avatica_go_server.TypeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Columns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.ColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Columns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Columns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Columns(ctx, req.(*calcite_avatica_go_server.ColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Prepare(ctx, req.(*calcite_avatica_go_server.PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Execute(ctx, req.(*calcite_avatica_go_server.ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_PrepareAndExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.PrepareAndExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).PrepareAndExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/PrepareAndExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).PrepareAndExecute(ctx, req.(*calcite_avatica_go_server.PrepareAndExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_SyncResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.SyncResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).SyncResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/SyncResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).SyncResults(ctx, req.(*calcite_avatica_go_server.SyncResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Fetch(ctx, req.(*calcite_avatica_go_server.FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_CreateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.CreateStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).CreateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/CreateStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).CreateStatement(ctx, req.(*calcite_avatica_go_server.CreateStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_CloseStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.CloseStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).CloseStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/CloseStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).CloseStatement(ctx, req.(*calcite_avatica_go_server.CloseStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_OpenConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.OpenConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).OpenConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/OpenConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).OpenConnection(ctx, req.(*calcite_avatica_go_server.OpenConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_CloseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.CloseConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).CloseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/CloseConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).CloseConnection(ctx, req.(*calcite_avatica_go_server.CloseConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_ConnectionSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.ConnectionSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).ConnectionSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/ConnectionSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).ConnectionSync(ctx, req.(*calcite_avatica_go_server.ConnectionSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_DatabaseProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.DatabasePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).DatabaseProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/DatabaseProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).DatabaseProperty(ctx, req.(*calcite_avatica_go_server.DatabasePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Commit(ctx, req.(*calcite_avatica_go_server.CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).Rollback(ctx, req.(*calcite_avatica_go_server.RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_PrepareAndExecuteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.PrepareAndExecuteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).PrepareAndExecuteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/PrepareAndExecuteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).PrepareAndExecuteBatch(ctx, req.(*calcite_avatica_go_server.PrepareAndExecuteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatica_ExecuteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calcite_avatica_go_server.ExecuteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaticaServer).ExecuteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatica_grpc.Avatica/ExecuteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaticaServer).ExecuteBatch(ctx, req.(*calcite_avatica_go_server.ExecuteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Avatica_ServiceDesc is the grpc.ServiceDesc for Avatica service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Avatica_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avatica_grpc.Avatica",
	HandlerType: (*AvaticaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Catalogs",
			Handler:    _Avatica_Catalogs_Handler,
		},
		{
			MethodName: "Schemas",
			Handler:    _Avatica_Schemas_Handler,
		},
		{
			MethodName: "Tables",
			Handler:    _Avatica_Tables_Handler,
		},
		{
			MethodName: "TableTypes",
			Handler:    _Avatica_TableTypes_Handler,
		},
		{
			MethodName: "TypeInfo",
			Handler:    _Avatica_TypeInfo_Handler,
		},
		{
			MethodName: "Columns",
			Handler:    _Avatica_Columns_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Avatica_Prepare_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Avatica_Execute_Handler,
		},
		{
			MethodName: "PrepareAndExecute",
			Handler:    _Avatica_PrepareAndExecute_Handler,
		},
		{
			MethodName: "SyncResults",
			Handler:    _Avatica_SyncResults_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Avatica_Fetch_Handler,
		},
		{
			MethodName: "CreateStatement",
			Handler:    _Avatica_CreateStatement_Handler,
		},
		{
			MethodName: "CloseStatement",
			Handler:    _Avatica_CloseStatement_Handler,
		},
		{
			MethodName: "OpenConnection",
			Handler:    _Avatica_OpenConnection_Handler,
		},
		{
			MethodName: "CloseConnection",
			Handler:    _Avatica_CloseConnection_Handler,
		},
		{
			MethodName: "ConnectionSync",
			Handler:    _Avatica_ConnectionSync_Handler,
		},
		{
			MethodName: "DatabaseProperty",
			Handler:    _Avatica_DatabaseProperty_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Avatica_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Avatica_Rollback_Handler,
		},
		{
			MethodName: "PrepareAndExecuteBatch",
			Handler:    _Avatica_PrepareAndExecuteBatch_Handler,
		},
		{
			MethodName: "ExecuteBatch",
			Handler:    _Avatica_ExecuteBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatica.proto",
}
